/*Run macro first.*/



/*Macro 1: WOE IV imputation*/
%macro woeiv;
** count event and nonevent;
%do i=1 %to &varcount;
data &try_model;
set &try_model;
if &&x&i=. then &&x&i=-1000000000;
run;

proc sql;
select sum(case when &target=0 then 1 else 0 end), sum(case when &target=1 then 1 else
0 end),count(*)
into :tot_nonevent, :tot_event, :tot_both
from &try_model;
quit;

proc sql;
select count(*) into :nonmiss
from &try_model
where &&x&i ne -1000000000;
quit;

** compute Weight of Evidence (WoE);
proc sql;
create table woe&i as
(select "&&x&i" as tablevar,
&&x&i as tier,
count(*) as cnt,
count(*)/&tot_both as cnt_pct,
sum(case when &target=1 then 1 else 0 end) as sum_event,
sum(case when &target=1 then 1 else 0 end)/&tot_event as dist_event,
sum(case when &target=0 then 1 else 0 end) as sum_nonevent,
sum(case when &target=0 then 1 else 0 end)/&tot_nonevent as dist_nonevent,
log((sum(case when &target=1 then 1 else 0 end)/&tot_event)/(sum(case when &target=0 then 1 else 0 end)/&tot_nonevent)) * 100 as woe,
((sum(case when &target=1 then 1 else 0 end)/&tot_event)-(sum(case when &target=0 then 1 else 0 end)/&tot_nonevent))
*log((sum(case when &target=1 then 1 else 0 end)/&tot_event)/(sum(case when &target=0 then 1 else 0 end)/&tot_nonevent)) as pre_iv
from &try_model
group by "&&x&i", &&x&i
)
order by &&x&i;
quit;

** compute Information Value (IV);
proc sql;
create table iv&i as select "&&x&i" as tablevar,
sum(pre_iv) as iv,
(1-&nonmiss/&tot_both) as pct_missing
from woe&i;quit;
%end;
data &woeout;
length tablevar $40.0;
set woe1-woe&varcount;
run;

data &ivout;
length tablevar $40.0;
set iv1-iv&varcount;run;

%mend woeiv;





/*Macro 2: WOE IV imputation for each variable*/
%macro woeinput(variable);
data a;
set &woedataset;
if tier = -1000000000 then tier = 0;
run;

proc sql;
select min(tier) into:num1
from a
where tablevar = "&variable&sort";
quit;


proc sql;
select max(tier) into:num2
from a
where tablevar = "&variable&sort";
quit;

%put &num1;
%put &num2;


%do i=&num1 %to &num2;
	proc sql;
	select woe into:w
	from a
	where tablevar="&variable&sort" and tier=&i;
	quit;

	%put &w;

	data &metadataset(drop=&variable);
	set &metadataset;
	if &variable&sort=-1000000000 then &variable&woe=0;
	if &variable&sort=&i then &variable&woe = &w;
	run;

%end;

%mend;





/*Macro 3: K-fold to impute WOE*/
%macro k_fold_woe(dsn=, k=, seed=);

/*randomly split into k folds*/
data _modif;
  set &dsn;
  unif=&k*ranuni(&seed);
  xv=ceil(unif);
run;

/*Loop starts here*/
%do j=1 %to &k ;

	data y.as_xsell_to_term_cvtrain_&j;
	set _modif;
	where xv ne &j;
	run;

	data y.as_xsell_to_term_cvtest_&j;
	set _modif;
	where xv=&j;
	run;


	/*Compute WOE for each train set*/
	%let try_model=y.as_xsell_to_term_cvtrain_&j;
	%let ivout=train_iv_&j;
	%let woeout=train_woe_&j;
	%woeiv;

	/*Compute WOE for each test set*/
	%let try_model=y.as_xsell_to_term_cvtest_&j;
	%let ivout=test_iv_&j;
	%let woeout=test_woe_&j;
	%woeiv;


%end;

%mend;




/*Macro 4: K-fold to impute WOE*/
%macro k_fold_woeinput(k=);
%do j=1 %to &k ;
	%let woedataset  = train_woe_&j;
	%let metadataset = y.as_xsell_to_term_cvtrain_&j;
	%woeinput(has_email)
	%woeinput(cert_channel_InPhone_count);
	%woeinput(cert_channel_Internet_count);
	%woeinput(cert_channel_OutPhone_count);
	%woeinput(active_auth_as_cert_count);
	%woeinput(active_AD_cert_count);
	%woeinput(active_ADI_cert_count);
	%woeinput(active_CARP_cert_count);
	%woeinput(paymode_CC_cert_count);
	%woeinput(paymode_PAC_cert_count);
	%woeinput(paymode_ULOC_cert_count);
	%woeinput(lapsed_cert_count);
	%woeinput(sum_cert_annualizedpremium);
	%woeinput(terminated_cov_count);
	%woeinput(min_years_since_purchase);
	%woeinput(min_age_at_contract);
	%woeinput(max_face_amount);




	%let woedataset  = test_woe_&j;
	%let metadataset =y.as_xsell_to_term_cvtest_&j;
	%woeinput(has_email)
	%woeinput(cert_channel_InPhone_count);
	%woeinput(cert_channel_Internet_count);
	%woeinput(cert_channel_OutPhone_count);
	%woeinput(active_auth_as_cert_count);
	%woeinput(active_AD_cert_count);
	%woeinput(active_ADI_cert_count);
	%woeinput(active_CARP_cert_count);
	%woeinput(paymode_CC_cert_count);
	%woeinput(paymode_PAC_cert_count);
	%woeinput(paymode_ULOC_cert_count);
	%woeinput(lapsed_cert_count);
	%woeinput(sum_cert_annualizedpremium);
	%woeinput(terminated_cov_count);
	%woeinput(min_years_since_purchase);
	%woeinput(min_age_at_contract);
	%woeinput(max_face_amount);



%end;

%mend;






/*Macro 5: K-fold cross validation*/
%macro k_fold_cv(k=, method=, ridging=);

/*Loop starts here*/
%do i=1 %to &k ;

	/*Training*/
	ods graphics on;
	proc logistic data=y.as_xsell_to_term_cvtrain_&i descending outest=model_param_&i plots=roc;
	 model target_hasTerm (event='1') =
			has_email_woe
			cert_channel_InPhone_count_woe
			cert_channel_Internet_count_woe
			cert_channel_OutPhone_count_woe
			active_auth_as_cert_count_woe
			active_AD_cert_count_woe
			active_ADI_cert_count_woe
			active_CARP_cert_count_woe
			paymode_CC_cert_count_woe
			paymode_PAC_cert_count_woe
			paymode_ULOC_cert_count_woe
			lapsed_cert_count_woe
			sum_cert_annualizedpremium_woe
			terminated_cov_count_woe
			min_years_since_purchase_woe
			min_age_at_contract_woe
			max_face_amount_woe
		/ selection=&method
		ridging=&ridging
		slentry=0.05
		slstay=0.05
		stb;
	score data=y.as_xsell_to_term_cvtest_&i  out=test_pred_&i outroc=iv_roc_&i; 
	roc;roccontrast;
	run;


	/*get statistics*/
	proc freq data=test_pred_&i;
	 tables P_1*target_hasTerm/noprint measures;
	 ods output measures=test_measure&i;
	run;

	/*calculate AUC*/
	data test_measure&i (keep= folds AUC AUC_95LL AUC_95UL ASE);
	 set test_measure&i (keep= statistic value ase);
	 where statistic="Somers' D R|C";
	 folds=&i;
	 AUC=(value+1)/2;
	 AUC_95LL= AUC-1.96*(ase/2);
	 AUC_95UL= AUC+1.96*(ase/2);
	 ASE=ase;
	run;

%end;

*Merge all AUC measures over the fitted models;
 data test_auc;
	 set
	 %do i=1 %to &k;
		 test_measure&i
	 %end;
	 ;
 run;

 proc print data=test_auc;
 run;

 proc means data=test_auc ;

	 var auc;
 run;

%mend;










/*Macro 6: Permutation Feature Importance*/
%macro pfi_dataset(v_s=);

	proc sql noprint;
	select name into :mynames separated by ', '
	from &varnumlist
	where name ne "&v_s&woe";
	run;

	proc sql noprint;
	create table test_unshuffled as
	select &mynames
	from &pfi_dsn;
	run;

	data data_unshuffled;
	set test_unshuffled;
	rownum=_n_;
	run;

	proc sql noprint;
	create table test_shuffled as 
	select *,
	ranuni(&seed1) as rand1,
	ranuni(&seed2) as rand2,
	calculated rand1 + calculated rand2 as rand
	from &pfi_dsn
	order by calculated rand;
	run;

	data data_shuffled;
	set test_shuffled;
	rownum=_n_;
	run;

	proc sql;
	create table y.ds_&v_s as 
	select a.*, b.&v_s&woe
	from data_unshuffled a 
	left join data_shuffled b
	on a.rownum = b.rownum;
	run;


%mend pfi_dataset;




/*Macro 7: Compute Permutation Feature Importance*/
%macro compute_pfi(pfi_dsn=, v_s=);

proc sql noprint;
create table dsn as
select a.*,
b.decile as decile_baseline,
b.P_1 as P_baseline
from &pfi_dsn a
left join &ov_pred b
on a.unique_customer_id = b.unique_customer_id;
run;



ods graphics on;

Proc logistic data=dsn descending plots=roc inest=y.as_xsell_to_term_model_params;
model target_hasTerm(event='1')=
	has_email_woe
	cert_channel_InPhone_count_woe
	cert_channel_Internet_count_woe
	cert_channel_OutPhone_count_woe
	active_ADI_cert_count_woe
	paymode_CC_cert_count_woe
	paymode_PAC_cert_count_woe
	min_age_at_contract_woe
	

	/maxiter=0;
	output out=pred p=P_pfi;
	roc;roccontrast;
run;

proc rank data=pred descending groups=10 out=pfi_pred_decile;
var P_pfi;
ranks decile;
run;


proc sql;
create table y.pfi_&v_s as 
select *,
(P_baseline - P_pfi) as score_diff,
(decile_baseline - decile) as decile_diff
from pfi_pred_decile;
run;

proc means data=y.pfi_&v_s ;
	 var score_diff decile_diff;
run;


%mend;



/*Macro 8: Loop through to compute Permutation Feature Importance for each significant variable*/
%macro pfi_dataset_loop;

%do i=1 %to &pfi_vcount ;

%pfi_dataset(v_s=&&v&i);

%end;

%mend;





/*Macro 9: Loop through to compute Permutation Feature Importance for each significant variable*/
%macro compute_pfi_loop(pfi_dsn=, v_s=);
%do i=1 %to &pfi_vcount ;

%compute_pfi(pfi_dsn=y.ds_&&v&i, v_s=&&v&i);

%end;

%mend;
